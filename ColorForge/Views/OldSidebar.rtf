{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red108\green121\blue134;\red31\green31\blue36;\red255\green255\blue255;
\red252\green95\blue163;\red93\green216\blue255;\red208\green168\blue255;\red208\green168\blue255;\red65\green161\blue192;
\red158\green241\blue221;\red103\green183\blue164;\red161\green103\blue230;\red161\green103\blue230;\red103\green183\blue164;
\red208\green191\blue105;\red252\green106\blue93;}
{\*\expandedcolortbl;;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c81569\c65882\c100000;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c25490\c63137\c75294;
\csgenericrgb\c61961\c94510\c86667;\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c40392\c71765\c64314;
\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c98912\c41558\c36568;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\partightenfactor0

\f0\fs24 \cf2 \cb3 //\cf4 \
\cf2 //  SideBar.swift\cf4 \
\cf2 //  ColorForge\cf4 \
\cf2 //\cf4 \
\cf2 //  Created by admin on 22/05/2025.\cf4 \
\cf2 //\cf4 \
\

\f1\b \cf5 import
\f0\b0 \cf4  Foundation\

\f1\b \cf5 import
\f0\b0 \cf4  SwiftUI\
\

\f1\b \cf5 struct
\f0\b0 \cf4  \cf6 SidebarView\cf4 : \cf7 View\cf4  \{\
	\cf8 @EnvironmentObject\cf4  
\f1\b \cf5 var
\f0\b0 \cf4  \cf9 dataModel\cf4 : \cf10 DataModel\cf4 \
	\cf8 @ObservedObject\cf4  
\f1\b \cf5 var
\f0\b0 \cf4  \cf9 pipeline\cf4 : \cf10 FilterPipeline\cf4 \
\
	\
	\
	
\f1\b \cf5 var
\f0\b0 \cf4  \cf9 body\cf4 : 
\f1\b \cf5 some
\f0\b0 \cf4  \cf7 View\cf4  \{\
		
\f1\b \cf5 let
\f0\b0 \cf4  url = \cf11 pipeline\cf4 .\cf11 currentURL\cf4  ?? \cf11 dataModel\cf4 .\cf11 items\cf4 .\cf12 first\cf4 ?.\cf11 url\cf4 \
\
		
\f1\b \cf5 let
\f0\b0 \cf4  temp = url.\cf13 flatMap\cf4  \{ \cf11 dataModel\cf4 .\cf14 binding\cf4 (\cf14 for\cf4 : $0, \cf14 settingsPath\cf4 : \\.\cf11 rawAdjustSettings\cf4 .\cf11 temp\cf4 ) \}\
		
\f1\b \cf5 let
\f0\b0 \cf4  tint = url.\cf13 flatMap\cf4  \{ \cf11 dataModel\cf4 .\cf14 binding\cf4 (\cf14 for\cf4 : $0, \cf14 settingsPath\cf4 : \\.\cf11 rawAdjustSettings\cf4 .\cf11 tint\cf4 ) \}\
		
\f1\b \cf5 let
\f0\b0 \cf4  exposure = url.\cf13 flatMap\cf4  \{ \cf11 dataModel\cf4 .\cf14 binding\cf4 (\cf14 for\cf4 : $0, \cf14 settingsPath\cf4 : \\.\cf11 rawAdjustSettings\cf4 .\cf11 exposure\cf4 ) \}\
		
\f1\b \cf5 let
\f0\b0 \cf4  contrast = url.\cf13 flatMap\cf4  \{ \cf11 dataModel\cf4 .\cf14 binding\cf4 (\cf14 for\cf4 : $0, \cf14 settingsPath\cf4 : \\.\cf11 rawAdjustSettings\cf4 .\cf11 contrast\cf4 ) \}\
		
\f1\b \cf5 let
\f0\b0 \cf4  saturation = url.\cf13 flatMap\cf4  \{ \cf11 dataModel\cf4 .\cf14 binding\cf4 (\cf14 for\cf4 : $0, \cf14 settingsPath\cf4 : \\.\cf11 rawAdjustSettings\cf4 .\cf11 saturation\cf4 ) \}\
		\
		\cf8 ScrollView\cf4  \{\
			\cf8 VStack\cf4 (\cf13 alignment\cf4 : .\cf12 leading\cf4 , \cf13 spacing\cf4 : \cf15 24\cf4 ) \{\
			\
\
				\cf8 Group\cf4  \{\
					\
							\cf8 Text\cf4 (\cf16 "Temperature (\cf4 \\(\cf8 Int\cf4 (temp?.\cf12 wrappedValue\cf4  ?? \cf15 0\cf4 ))\cf16 "\cf4 )\
							\cf8 Slider\cf4 (\cf13 value\cf4 : temp ?? .\cf13 constant\cf4 (\cf15 0\cf4 ), \cf13 in\cf4 : \cf15 2000\cf4 ...\cf15 10000\cf4 , \cf13 step\cf4 : \cf15 100\cf4 )\
								.\cf13 accentColor\cf4 (.\cf12 blue\cf4 )\
								.\cf13 disabled\cf4 (temp == 
\f1\b \cf5 nil
\f0\b0 \cf4 )\
\
							\cf8 Text\cf4 (\cf16 "Tint (\cf4 \\(\cf8 String\cf4 (\cf13 format\cf4 : \cf16 "%.1f"\cf4 , tint?.\cf12 wrappedValue\cf4  ?? \cf15 0\cf4 ))\cf16 )"\cf4 )\
							\cf8 Slider\cf4 (\cf13 value\cf4 : tint ?? .\cf13 constant\cf4 (\cf15 0\cf4 ), \cf13 in\cf4 : -\cf15 150\cf4 ...\cf15 150\cf4 , \cf13 step\cf4 : \cf15 0.1\cf4 )\
								.\cf13 disabled\cf4 (tint == 
\f1\b \cf5 nil
\f0\b0 \cf4 )\
\
							\cf8 Text\cf4 (\cf16 "Exposure (\cf4 \\(\cf8 String\cf4 (\cf13 format\cf4 : \cf16 "%.1f"\cf4 , exposure?.\cf12 wrappedValue\cf4  ?? \cf15 0\cf4 ))\cf16 )"\cf4 )\
							\cf8 Slider\cf4 (\cf13 value\cf4 : exposure ?? .\cf13 constant\cf4 (\cf15 0\cf4 ), \cf13 in\cf4 : -\cf15 5\cf4 ...\cf15 5\cf4 , \cf13 step\cf4 : \cf15 0.1\cf4 )\
								.\cf13 disabled\cf4 (exposure == 
\f1\b \cf5 nil
\f0\b0 \cf4 )\
\
							\cf8 Text\cf4 (\cf16 "Contrast (\cf4 \\(\cf8 Int\cf4 (contrast?.\cf12 wrappedValue\cf4  ?? \cf15 0\cf4 ))\cf16 )"\cf4 )\
							\cf8 Slider\cf4 (\cf13 value\cf4 : contrast ?? .\cf13 constant\cf4 (\cf15 0\cf4 ), \cf13 in\cf4 : -\cf15 100\cf4 ...\cf15 100\cf4 , \cf13 step\cf4 : \cf15 1\cf4 )\
								.\cf13 disabled\cf4 (contrast == 
\f1\b \cf5 nil
\f0\b0 \cf4 )\
\
							\cf8 Text\cf4 (\cf16 "Saturation (\cf4 \\(\cf8 Int\cf4 (saturation?.\cf12 wrappedValue\cf4  ?? \cf15 0\cf4 ))\cf16 )"\cf4 )\
							\cf8 Slider\cf4 (\cf13 value\cf4 : saturation ?? .\cf13 constant\cf4 (\cf15 0\cf4 ), \cf13 in\cf4 : -\cf15 100\cf4 ...\cf15 100\cf4 , \cf13 step\cf4 : \cf15 1\cf4 )\
								.\cf13 disabled\cf4 (saturation == 
\f1\b \cf5 nil
\f0\b0 \cf4 )\
						\}\
				\
\
\cf2 //				\cf4 \
\cf2 //				Button(action: \{\cf4 \
\cf2 //					guard let fullResImage = pipeline.fullResImage else \{return\}\cf4 \
\cf2 //					guard let output = pipeline.applySavePipeline(fullResImage) else \{return\}\cf4 \
\cf2 //					guard let url = currentUrl else \{return\}\cf4 \
\cf2 //					saveImage(output, url)\cf4 \
\cf2 //				\}) \{\cf4 \
\cf2 //					Text("Save image")\cf4 \
\cf2 //						.padding()\cf4 \
\cf2 //						.background(Color.blue)\cf4 \
\cf2 //						.foregroundColor(.white)\cf4 \
\cf2 //						.cornerRadius(8)\cf4 \
\cf2 //				\}\cf4 \
\cf2 //				\cf4 \
\cf2 //				Group \{\cf4 \
\cf2 //					HStack \{\cf4 \
\cf2 //						Toggle("Apply Grain", isOn: $pipeline.applyGrain)\cf4 \
\cf2 //					\}\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("Grain Amount (\\(Int(pipeline.grainAmount)))")\cf4 \
\cf2 //					Slider(value: $pipeline.grainAmount, in: 0...200, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //				\}\cf4 \
\cf2 //				\cf4 \
\cf2 //				Group \{\cf4 \
\cf2 //\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("Enlarger Lens Aperture (f/\\(fStopValues[apertureIndex], specifier: "%.1f"))")\cf4 \
\cf2 //					Slider(\cf4 \
\cf2 //						value: Binding(\cf4 \
\cf2 //							get: \{ Double(apertureIndex) \},\cf4 \
\cf2 //							set: \{\cf4 \
\cf2 //								apertureIndex = Int($0.rounded())\cf4 \
\cf2 //								pipeline.enlargerFStop = fStopValues[apertureIndex]\cf4 \
\cf2 //							\}\cf4 \
\cf2 //						),\cf4 \
\cf2 //						in: 0...Double(fStopValues.count - 1),\cf4 \
\cf2 //						step: 1\cf4 \
\cf2 //					)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("Enlarger Exposure (\\(pipeline.enlargerExp) Seconds)")\cf4 \
\cf2 //					Slider(value: $pipeline.enlargerExp, in: 0...100, step: 0.33)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("Cyan (\\(pipeline.cyan))")\cf4 \
\cf2 //					Slider(value: $pipeline.cyan, in: 0...200, step: 1)\cf4 \
\cf2 //\cf4 \
\cf2 //					Text("Magenta (\\(pipeline.magenta))")\cf4 \
\cf2 //					Slider(value: $pipeline.magenta, in: 0...200, step: 1)\cf4 \
\cf2 //\cf4 \
\cf2 //					Text("Yellow (\\(pipeline.yellow))")\cf4 \
\cf2 //					Slider(value: $pipeline.yellow, in: 0...200, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Toggle("Apply Print Flash", isOn: $pipeline.applyFlash)\cf4 \
\cf2 //					Toggle("Preview Print Flash", isOn: $pipeline.previewFlash)\cf4 \
\cf2 //				\}\cf4 \
				\
\cf2 //				Group \{\cf4 \
\cf2 //					Toggle("Convert to Neg", isOn: $pipeline.convertToNeg)\cf4 \
\cf2 //					Toggle("Print Mode", isOn: $pipeline.applyPrintMode)\cf4 \
\cf2 //					Toggle("Apply Scan Mode", isOn: $pipeline.applyScanMode)\cf4 \
\cf2 //					Toggle("Apply Display Transform", isOn: $pipeline.applyPFE)\cf4 \
\cf2 //\cf4 \
\cf2 //					Text("Offset RGB (\\(Int(pipeline.offsetRGB)))")\cf4 \
\cf2 //					Slider(value: $pipeline.offsetRGB, in: -100...100, step: 1)\cf4 \
\cf2 //\cf4 \
\cf2 //					Text("Offset Red (\\(Int(pipeline.offsetRed)))")\cf4 \
\cf2 //					Slider(value: $pipeline.offsetRed, in: -100...100, step: 1)\cf4 \
\cf2 //\cf4 \
\cf2 //					Text("Offset Green (\\(Int(pipeline.offsetGreen)))")\cf4 \
\cf2 //					Slider(value: $pipeline.offsetGreen, in: -100...100, step: 1)\cf4 \
\cf2 //\cf4 \
\cf2 //					Text("Offset Blue (\\(Int(pipeline.offsetBlue)))")\cf4 \
\cf2 //					Slider(value: $pipeline.offsetBlue, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("Contrast (\\(Int(pipeline.scanContrast)))")\cf4 \
\cf2 //					Slider(value: $pipeline.scanContrast, in: -100...100, step: 1)\cf4 \
\cf2 //\cf4 \
\cf2 //					Text("Kodak 2383 Blend (\\(Int(pipeline.lutBlend)))")\cf4 \
\cf2 //					Slider(value: $pipeline.lutBlend, in: 0...100, step: 1)\cf4 \
\cf2 //				\}\cf4 \
				\
				\
\
\cf2 //				\cf4 \
\cf2 //				Group \{\cf4 \
\cf2 //					Toggle("Apply MTF", isOn: $pipeline.applyMTF)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Picker("Film Format", selection: $pipeline.selectedGateWidth) \{\cf4 \
\cf2 //						Text("Medium Format").tag(0)\cf4 \
\cf2 //						Text("Crop Medium Format").tag(1)\cf4 \
\cf2 //						Text("35mm Still").tag(2)\cf4 \
\cf2 //						Text("Half Frame").tag(3)\cf4 \
\cf2 //						Text("Standard 35mm Motion").tag(4)\cf4 \
\cf2 //						Text("Super 35mm Motion").tag(5)\cf4 \
\cf2 //						Text("16mm Motion").tag(6)\cf4 \
\cf2 //						Text("8mm Motion").tag(7)\cf4 \
\cf2 //						Text("Super 8 Motion").tag(8)\cf4 \
\cf2 //					\}\cf4 \
\cf2 //					.pickerStyle(MenuPickerStyle())\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("MTF Blend (\\(Int(pipeline.mtfBlend)))")\cf4 \
\cf2 //					Slider(value: $pipeline.mtfBlend, in: 0...100, step: 1)\cf4 \
\cf2 //				\}\cf4 \
\cf2 //\cf4 \
\cf2 //				Group \{\cf4 \
\cf2 //					Text("HDR White (\\(Int(pipeline.hdrWhite)))")\cf4 \
\cf2 //					Slider(value: $pipeline.hdrWhite, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HDR Highlight (\\(Int(pipeline.hdrHighlight)))")\cf4 \
\cf2 //					Slider(value: $pipeline.hdrHighlight, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HDR Shadow (\\(Int(pipeline.hdrShadow)))")\cf4 \
\cf2 //					Slider(value: $pipeline.hdrShadow, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HDR Black (\\(Int(pipeline.hdrBlack)))")\cf4 \
\cf2 //					Slider(value: $pipeline.hdrBlack, in: -100...100, step: 1)\cf4 \
\cf2 //				\}\cf4 \
\cf2 //				\cf4 \
\cf2 //				Group \{\cf4 \
\cf2 //					Toggle("Preview Red", isOn: $pipeline.previewRed)\cf4 \
\cf2 //					Toggle("Preview Green", isOn: $pipeline.previewGreen)\cf4 \
\cf2 //					Toggle("Preview Blue", isOn: $pipeline.previewBlue)\cf4 \
\cf2 //					Toggle("Preview Cyan", isOn: $pipeline.previewCyan)\cf4 \
\cf2 //					Toggle("Preview Magenta", isOn: $pipeline.previewMagenta)\cf4 \
\cf2 //					Toggle("Preview Yellow", isOn: $pipeline.previewYellow)\cf4 \
\cf2 //					\cf4 \
\cf2 //					// HSD Sliders\cf4 \
\cf2 //					Text("HSD Red Hue (\\(Int(pipeline.redHue)))")\cf4 \
\cf2 //					Slider(value: $pipeline.redHue, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Red Saturation (\\(Int(pipeline.redSat)))")\cf4 \
\cf2 //					Slider(value: $pipeline.redSat, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Red Density (\\(Int(pipeline.redDen)))")\cf4 \
\cf2 //					Slider(value: $pipeline.redDen, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Green Hue (\\(Int(pipeline.greenHue)))")\cf4 \
\cf2 //					Slider(value: $pipeline.greenHue, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Green Saturation (\\(Int(pipeline.greenSat)))")\cf4 \
\cf2 //					Slider(value: $pipeline.greenSat, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Green Density (\\(Int(pipeline.greenDen)))")\cf4 \
\cf2 //					Slider(value: $pipeline.greenDen, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Blue Hue (\\(Int(pipeline.blueHue)))")\cf4 \
\cf2 //					Slider(value: $pipeline.blueHue, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Blue Saturation (\\(Int(pipeline.blueSat)))")\cf4 \
\cf2 //					Slider(value: $pipeline.blueSat, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Blue Density (\\(Int(pipeline.blueDen)))")\cf4 \
\cf2 //					Slider(value: $pipeline.blueDen, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Cyan Hue (\\(Int(pipeline.cyanHue)))")\cf4 \
\cf2 //					Slider(value: $pipeline.cyanHue, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Cyan Saturation (\\(Int(pipeline.cyanSat)))")\cf4 \
\cf2 //					Slider(value: $pipeline.cyanSat, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Cyan Density (\\(Int(pipeline.cyanDen)))")\cf4 \
\cf2 //					Slider(value: $pipeline.cyanDen, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Magenta Hue (\\(Int(pipeline.magentaHue)))")\cf4 \
\cf2 //					Slider(value: $pipeline.magentaHue, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Magenta Saturation (\\(Int(pipeline.magentaSat)))")\cf4 \
\cf2 //					Slider(value: $pipeline.magentaSat, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Magenta Density (\\(Int(pipeline.magentaDen)))")\cf4 \
\cf2 //					Slider(value: $pipeline.magentaDen, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Yellow Hue (\\(Int(pipeline.yellowHue)))")\cf4 \
\cf2 //					Slider(value: $pipeline.yellowHue, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Yellow Saturation (\\(Int(pipeline.yellowSat)))")\cf4 \
\cf2 //					Slider(value: $pipeline.yellowSat, in: -100...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("HSD Yellow Density (\\(Int(pipeline.yellowDen)))")\cf4 \
\cf2 //					Slider(value: $pipeline.yellowDen, in: -100...100, step: 1)\cf4 \
\cf2 //				\}\cf4 \
\cf2 //				\cf4 \
\cf2 //\cf4 \
\cf2 //				\cf4 \
\cf2 //				Group \{\cf4 \
\cf2 //					Toggle("Apply Neg Halation", isOn: $pipeline.applyNegHalation)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("Halation Radius (\\(pipeline.negHalationSpread))")\cf4 \
\cf2 //					Slider(value: $pipeline.negHalationSpread, in: 0...4, step: 0.01)\cf4 \
\cf2 //					\cf4 \
\cf2 //					Text("Halation Blend Blend (\\(Int(pipeline.negHalationBlend)))")\cf4 \
\cf2 //					Slider(value: $pipeline.negHalationBlend, in: 0...100, step: 1)\cf4 \
\cf2 //					\cf4 \
\cf2 //				\}\cf4 \
				\
\
\
\
			\}\
			.\cf13 padding\cf4 ()\
		\}\
		.\cf13 frame\cf4 (\cf13 width\cf4 : \cf15 300\cf4 )\
	\}\
\}\
}